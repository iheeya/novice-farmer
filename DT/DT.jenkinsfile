pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-khk')
        GITLAB_CREDENTIALS = credentials('gitlab_deploy')
        DOCKER_USERNAME = 'jingluv'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    env.ENABLE_FASTAPI = "false"
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    echo "Gitlab을 확인합니다."
                    git branch: 'master', url: 'https://lab.ssafy.com/s11-bigdata-recom-sub1/S11P21D207.git', credentialsId: 'gitlab_deploy'
                }
                script {
                    env.GIT_COMMIT = GIT_COMMIT
                }
            }
        }

        stage('FastAPI 빌드 중...') {
            when {
                changeset "FastAPI/**"
            }
            steps {
                script {
                    echo "새로운 버전으로 업로드 중..."
                    dir('FastAPI') { 
                        def fastapi_image = docker.build("${DOCKER_USERNAME}/farmer-dt:${GIT_COMMIT}")
                        docker.withRegistry('https://index.docker.io/v1/', DOCKER_HUB_CREDENTIALS) {
                            fastapi_image.push()
                        }
                        env.FASTAPI_IMAGE_TAG = "${GIT_COMMIT}"
                        env.ENABLE_FASTAPI = "true"
                    }
                }
            }
        }

        
        stage('새로운 컨테이너를 배포중입니다...') {
            steps {
                script {
                    if (env.ENABLE_FASTAPI == "true") {
                        echo "FastAPI 컨테이너를 잠시 중지합니다."
                        sh '''
                        docker stop fastapi || true
                        docker rm fastapi || true
                        fuser -k 8000/tcp || true
                        '''
                        sleep 10
                        sh """
                        docker-compose up -d fastapi
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            echo "워크페이스를 초기화합니다."
            cleanWs()
        }
    }
}

